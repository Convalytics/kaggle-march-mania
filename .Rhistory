ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red')
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=30, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,30)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
ggplot(csat, aes(COGS)) + geom_histogram(binwidth=30, fill=goodScore, color="black") + theme_bw()
ggplot(csat, aes(COGS)) + geom_histogram(binwidth=30, fill=csat$goodScore, color="black") + theme_bw()
ggplot(csat, aes(COGS)) + geom_histogram(binwidth=30, fill=factor(csat$goodScore), color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
csat$RESPONSE_DATE <- as.Date(as.character(csat$RESPONSE_DATE), "%m/%D/%Y")
csat <- subset(csat, RESPONSE_DATE >= '01/01/2013')
csat
csat$RESPONSE_DATE
csat <- read.csv("C:/Users/jgreen/Documents/R_Files/CSAT_COGS.csv")
csat$goodScore <- subset(csat, CLAGENT >= 9)
csat$goodScore[csat$CLAGENT >= 9] <- "Y"
csat$goodScore[csat$CLAGENT < 9] <- "N"
csat$RESPONSE_DATE <- as.Date(as.character(csat$RESPONSE_DATE), "%m/%D/%Y")
csat$RESPONSE_DATE
csat <- read.csv("C:/Users/jgreen/Documents/R_Files/CSAT_COGS.csv")
csat$goodScore <- subset(csat, CLAGENT >= 9)
csat$goodScore[csat$CLAGENT >= 9] <- "Y"
csat$goodScore[csat$CLAGENT < 9] <- "N"
csat$RESPONSE_DATE <- as.Date(csat$RESPONSE_DATE, "%m/%D/%Y")
csat$RESPONSE_DATE
csat <- read.csv("C:/Users/jgreen/Documents/R_Files/CSAT_COGS.csv")
csat$goodScore <- subset(csat, CLAGENT >= 9)
csat$goodScore[csat$CLAGENT >= 9] <- "Y"
csat$goodScore[csat$CLAGENT < 9] <- "N"
csat$RESPONSE_DATE
csat <- subset(csat, RESPONSE_DATE >= '01/01/2013')
as.Date(csat$RESPONSE_DATE, format="%m/%D/%Y")
csat$RESPONSE_DATE
as.Date(as.character(csat$RESPONSE_DATE), format="%m/%D/%Y")
csat <- read.csv("C:/Users/jgreen/Documents/R_Files/CSAT_COGS.csv")
csat$goodScore <- subset(csat, CLAGENT >= 9)
csat$goodScore[csat$CLAGENT >= 9] <- "Y"
csat$goodScore[csat$CLAGENT < 9] <- "N"
as.Date(as.character(csat$RESPONSE_DATE), format="%m/%D/%Y")
as.Date(csat$RESPONSE_DATE, format="%m/%D/%Y")
as.Date(csat$RESPONSE_DATE, format="%Y")
as.Date(csat$RESPONSE_DATE, format="%Y-%M-%d")
as.Date(csat$RESPONSE_DATE, format="%Y-%M-%D")
as.Date(csat$RESPONSE_DATE, format="%YYYY-%mm-%dd")
as.Date(csat$RESPONSE_DATE, format="%Y-%m-%d")
as.Date(csat$RESPONSE_DATE, format="%Y %m %d")
as.Date(csat$RESPONSE_DATE, format="%m/%d/%Y")
csat$RESPONSE_DATE <- as.Date(csat$RESPONSE_DATE, format="%m/%d/%Y")
csat <- subset(csat, RESPONSE_DATE >= '01/01/2013')
csat
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=30, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,30)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
csat <- subset(csat, RESPONSE_DATE >= '12/01/2013')
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=30, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,30)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
csat
csat$RESPONSE_DATE
csat <- subset(csat, RESPONSE_DATE >= '2013-10-01')
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=30, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,30)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
csat <- subset(csat, RESPONSE_DATE >= '2013-12-01')
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=30, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,30)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,100)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,50)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,50)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
ggplot(csat, aes(goodScore)) + geom_histogram(aes(y = ..density..), fill="gray", color="black") + theme_bw()
ggplot(csat, aes(goodScore)) + geom_density()
ggplot(csat, aes(goodScore)) + geom_histogram(aes(y = ..density..), fill="gray", color="black") + theme_bw() + geom_density()
ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw() + geom_density()
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,50)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
#install.packages("ggplot2")  # Install GGPlot2 *Only needed if not already installed.
library(ggplot2)              # ggplot2 for creating the charts
library(scales)               # scales for the dollar formatting of the axis.
library(gridExtra)
#Load the csv file containing the values:
csat <- read.csv("C:/Users/jgreen/Documents/R_Files/CSAT_COGS.csv")
csat$goodScore <- subset(csat, CLAGENT >= 9)
csat$goodScore[csat$CLAGENT >= 9] <- "Y"
csat$goodScore[csat$CLAGENT < 9] <- "N"
csat$RESPONSE_DATE <- as.Date(csat$RESPONSE_DATE, format="%m/%d/%Y")
csat <- subset(csat, RESPONSE_DATE >= '2013-10-01')
#summary(csat)
#names(csat)
#with(csat, plot(CLAGENT, COGS))
#ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_jitter()
#hist(csat$CLAGENT)
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,50)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,600,200)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
ggplot(csat, aes(cut(COGS, seq(0,600,100)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='text',size = 3, color='red') + theme_bw()
ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
mean(csat$COGS ~ csat$CLAGENT)
mean(csat$CLAGENT ~ csat$COGS)
mean(csat$CLAGENT, csat$COGS)
tapply(csat$CLAGENT, csat$COGS, FUN=mean)
tapply(csat$COGS, csat$CLAGENT, FUN=mean)
aggregate(COGS~CLAGENT, data=csat, FUN="mean")
aggregate(COGS~goodScore, data=csat, FUN="mean")
tapply(csat$COGS, csat$goodScore, FUN=mean)
summaryBy(COGS~goodScore, data=csat, FUN="mean")
library(doBy)
install.packages("doBy")
library(doBy)                 # doBy for summarization
summaryBy(COGS~goodScore, data=csat, FUN="mean")
summaryBy(COGS~goodScore, data=csat, FUN="mean")
c(count=length(x), mean=mean(x),median=median(x)))
summaryBy(COGS~goodScore, data=csat, FUN="mean")
c(count=length(x), mean=mean(x),median=median(x))
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x),median=median(x)))
summaryBy(COGS~goodScore, data=csat, na.rm, FUN=function(x)
c(count=length(x), mean=mean(x),median=median(x)))
library(plyr)
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x, na.rm=TRUE),median=median(x)))
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x, na.rm=TRUE),median=median(x, na.rm=TRUE)))
tapply(csat$COGS, csat$goodScore, FUN=mean, na.rm=TRUE)
aggregate(COGS~goodScore, data=csat, FUN="mean", na.rm=TRUE)
ddply(csat, "goodScore", summarize, mean = mean(COGS, na.rm=TRUE))
names(csat)
ddply(csat, c("goodScore","PROP.STATE"), summarize, mean = mean(COGS, na.rm=TRUE))
ddply(csat, c("goodScore","PROP.STATE"), summarize,
mean = mean(COGS, na.rm=TRUE),
median = median(COGS, na.rm=TRUE))
ddply(csat, c("goodScore","PROP.STATE"), summarize,
Count = length(PROP.STATE),
mean = mean(COGS, na.rm=TRUE),
median = median(COGS, na.rm=TRUE))
DF <- ddply(csat, c("goodScore","PROP.STATE"), summarize,
Count = length(PROP.STATE),
mean = mean(COGS, na.rm=TRUE),
median = median(COGS, na.rm=TRUE))
edit(DF)
#install.packages("ggplot2")  # Install GGPlot2 *Only needed if not already installed.
#install.packages("doBy")
library(ggplot2)              # ggplot2 for creating the charts
library(scales)               # scales for the dollar formatting of the axis.
library(gridExtra)
library(doBy)                 # doBy for summarization
library(plyr)
#Load the csv file containing the values:
csat <- read.csv("C:/Users/jgreen/Documents/R_Files/CSAT_COGS.csv")
csat$goodScore <- subset(csat, CLAGENT >= 9)
csat$goodScore[csat$CLAGENT >= 9] <- "Y"
csat$goodScore[csat$CLAGENT < 9] <- "N"
csat$RESPONSE_DATE <- as.Date(csat$RESPONSE_DATE, format="%m/%d/%Y")
csat <- subset(csat, RESPONSE_DATE >= '2013-10-01')
#summary(csat)
#names(csat)
#with(csat, plot(CLAGENT, COGS))
#ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_jitter()
#hist(csat$CLAGENT)
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,600,100)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
max(csat$RESPONSE_DATE)
ddply(csat, "goodScore", summarize, mean = mean(COGS, na.rm=TRUE))
# Using doBy
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x, na.rm=TRUE),median=median(x, na.rm=TRUE)))
install.packages("knitr")
install.packages("plyr")
install.packages("quantmod")
?save
######################################################
#  Kaggle March Mania Competition
#  Jason Green
#  February, 12th 2014
#  https://github.com/Convalytics/kaggle-march-mania
#  Last Updated: 2/23/2014
######################################################
#install.packages('plyr')
library(plyr)
# Set Working Directory
#setwd("C:\\Users\\jgreen\\Documents\\GitHub\\kaggle-march-mania")
setwd("~/GitHub/kaggle-march-mania")
# Import Data
regular_season_results <- read.csv("~/GitHub/kaggle-march-mania/regular_season_results.csv")
tourney_results <- read.csv("~/GitHub/kaggle-march-mania/tourney_results.csv")
#sample_submission <- read.csv("~/GitHub/kaggle-march-mania/sample_submission.csv")
#load previous RPI predictor as starting point.
sample_submission <- read.csv("~/GitHub/kaggle-march-mania/convalytics_prediction_4.csv")
seeds <- read.csv("~/GitHub/kaggle-march-mania/tourney_seeds.csv")
slots <- read.csv("~/GitHub/kaggle-march-mania/tourney_slots.csv")
# Summarize the imported data
head(regular_season_results, n=10)
head(tourney_results, n=10)
head(sample_submission, n=10)
head(seeds, n=10)
head(slots, n=10)
# Start with the sample_submission file and append additional data to make our final prediction
submission <- sample_submission                           # Rename sample_submission to submission for shortness
submission$lowTeam <- substr(submission$id,3,5)           # Extract the teams from the id field
submission$highTeam <- substr(submission$id,7,9)
submission$season <- substr(submission$id,1,1)            # Extract the season from the id field
#Add seed numbers  (merge the seeds table with the submission file)
submissionWithSeeds <- merge(x = submission, y = seeds, by.x=c("lowTeam","season"), by.y=c("team","season"))
submissionWithSeeds <- rename(submissionWithSeeds, c("seed" = "lowTeamSeed"))
submissionWithSeeds <- merge(x = submissionWithSeeds, y = seeds, by.x=c("highTeam","season"), by.y=c("team","season"))
submissionWithSeeds <- rename(submissionWithSeeds, c("seed" = "highTeamSeed"))
# Remove all letters from the seed number. We're just looking for a number to rank teams. # gsub is a regex substitute function.
submissionWithSeeds$lowSeed <- gsub("[^0-9]","",submissionWithSeeds$lowTeamSeed)
submissionWithSeeds$highSeed <- gsub("[^0-9]","",submissionWithSeeds$highTeamSeed)
# Add High/Low/Winner columns to tourney_results
head(tourney_results, n=10)
tourney_results$lowTeamWon <- ifelse(tourney_results$wteam < tourney_results$lteam, 1, 0)
tourney_results$lowTeam <- ifelse(tourney_results$wteam < tourney_results$lteam, tourney_results$wteam, tourney_results$lteam)
tourney_results$highTeam <- ifelse(tourney_results$wteam > tourney_results$lteam, tourney_results$wteam, tourney_results$lteam)
#build an ID column to join into submission file
##########################################################################
tourney_results$id <- paste0(tourney_results$season, "_", tourney_results$lowTeam, "_", tourney_results$highTeam)
#Add regular season win/loss counts
#Win/Loss/% by Season/Team
Reg.Wins <- ddply(regular_season_results,c("season", "wteam"), summarise, N=length(wteam))
Reg.Losses <- ddply(regular_season_results,c("season","lteam"),summarise, N=length(lteam))
#Merge wins/losses by lowTeam/highTeam into the submission file
submissionWithSeeds <- merge(x = submissionWithSeeds, y = Reg.Wins, by.x=c("lowTeam","season"), by.y=c("wteam","season"))
submissionWithSeeds <- rename(submissionWithSeeds, c("N" = "lowTeamWins"))
submissionWithSeeds <- merge(x = submissionWithSeeds, y = Reg.Losses, by.x=c("lowTeam","season"), by.y=c("lteam","season"))
submissionWithSeeds <- rename(submissionWithSeeds, c("N" = "lowTeamLosses"))
submissionWithSeeds <- merge(x = submissionWithSeeds, y = Reg.Wins, by.x=c("highTeam","season"), by.y=c("wteam","season"))
submissionWithSeeds <- rename(submissionWithSeeds, c("N" = "highTeamWins"))
submissionWithSeeds <- merge(x = submissionWithSeeds, y = Reg.Losses, by.x=c("highTeam","season"), by.y=c("lteam","season"))
submissionWithSeeds <- rename(submissionWithSeeds, c("N" = "highTeamLosses"))
# Calculate regular season win pct
submissionWithSeeds$lowTeamWinRate <- submissionWithSeeds$lowTeamWins/(submissionWithSeeds$lowTeamWins + submissionWithSeeds$lowTeamLosses)
submissionWithSeeds$highTeamWinRate <- submissionWithSeeds$highTeamWins/(submissionWithSeeds$highTeamWins + submissionWithSeeds$highTeamLosses)
# Merge in Actual Tourney Data  (for checking our work)
submissionWithSeeds <- merge(x=submissionWithSeeds, y=tourney_results, by.x="id", by.y="id", all.x=TRUE)
# Just renaming submissionWithSeeds to sub.working for shortness
sub.working <- submissionWithSeeds
# Calculate the difference in the win rates of the low vs. high teams.
sub.working$lhWinDiff <- sub.working$lowTeamWinRate - sub.working$highTeamWinRate
#### Scott's win percentage algo
sub.working$pred.algo <- (sub.working$lowTeamWinRate-(sub.working$lowTeamWinRate*sub.working$highTeamWinRate))/(sub.working$lowTeamWinRate+sub.working$highTeamWinRate-(2*sub.working$lowTeamWinRate*sub.working$highTeamWinRate))
#### Win Diff prediction
sub.working$pred.lhWinDiff <- .5 + sub.working$lhWinDiff
#### Seed Predictor "RPI Beater"
sub.working$pred.seeds <-.5+.03*(as.numeric(sub.working$highSeed)-as.numeric(sub.working$lowSeed))
##############################################################################################
### Make a prediction  -----------------------------------------------------------------------
#sub.working$prediction <- .5     # Start by assuming each team has a 50% chance of winning.
#Instead of starting at 50%, we'll start at the previous prediction
#sub.working$prediction <- sub.working$pred     #
#sub.working$prediction <- sub.working$prediction + sub.working$lhWinDiff     # Add the difference in win%.
#sub.working$seedBonus <- ifelse(sub.working$lowSeed < sub.working$highSeed, .1, -.1)
#Now we're using the algo from Scott:
#Latest Ensemble: sub.working$pred <- (sub.working$pred.algo + sub.working$pred.lhWinDiff + sub.working$pred.seeds)/3
# Test Cheat - Remember to remove before next submission !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
sub.working$lowTeamWon <- ifelse(is.na(sub.working$lowTeamWon),.5,sub.working$lowTeamWon)
sub.working$pred <- (sub.working$pred.algo + sub.working$pred.lhWinDiff + sub.working$pred.seeds + sub.working$lowTeamWon)/4
#sub.working$pred <- sub.working$prediction # seed is already taken into account + sub.working$seedBonus
#sub.working$pred[sub.working$pred < .01] <- .01
#sub.working$pred[sub.working$pred > .99] <- .99
# Write out the full prediction file:
write.csv(sub.working, file = "predictionDetails.csv", row.names=F)
# Also save the prediction file as R data.
save(sub.working)
# Format and export the prediction
convalytics.prediction <- sub.working[,c("id","pred")]
# Write out the submission file for kaggle:
write.csv(convalytics.prediction, file = "convalytics_prediction-xx.csv", row.names=F)
# Get tourney win count for each team
# How many times did low team beat high team?
# Does high or low team have better tourney performance?
# Who performs better when away?
# Account for likelihood of an upset.
save(sub.working, file="predictionFile.rdata")
######################################################
#  Kaggle March Mania Competition
#  Jason Green
#  February, 12th 2014
#  https://github.com/Convalytics/kaggle-march-mania
#  Last Updated: 2/23/2014
######################################################
#install.packages('plyr')
library(plyr)
# Set Working Directory
#setwd("C:\\Users\\jgreen\\Documents\\GitHub\\kaggle-march-mania")
setwd("~/GitHub/kaggle-march-mania")
predictions <- load("~/GitHub/kaggle-march-mania/predictionFile.rdata")
regular_season_results
head(predictions)
load("~/GitHub/kaggle-march-mania/predictionFile.rdata")
saveRDS(sub.working, file="predictionFile.rdata")
predictions <- readRDS("~/GitHub/kaggle-march-mania/predictionFile.rdata")
head(predictions)
boxplot(predictions$pred ~ predictions$lowTeamWon)
boxplot(predictions$pred, predictions$pred.seeds ~ predictions$lowTeamWon)
boxplot(c(predictions$pred, predictions$pred.seeds) ~ predictions$lowTeamWon)
livegames <- subset(predictions, predictions$lowTeamWon == 1 | predictions$lowTeamWon == 0)
dim(livegames)
head(livegames)
plot(livegames$lowSeed ~ livegames$lowTeamWon)
boxplot(livegames$lowSeed ~ livegames$lowTeamWon)
boxplot(livegames$lowSeed ~ as.factor(livegames$lowTeamWon)
# Import Data
regular_season_results <- read.csv("~/GitHub/kaggle-march-mania/regular_season_results.csv")
boxplot(livegames$lowSeed ~ as.factor(livegames$lowTeamWon))
boxplot(as.factor(livegames$lowSeed) ~ as.factor(livegames$lowTeamWon))
boxplot(livegames$lowSeed ~ livegames$lowTeamWon)
plot(livegames$lowSeed ~ livegames$lowTeamWon)
plot(as.Numeric(livegames$lowSeed) ~ livegames$lowTeamWon)
plot(as.numeric(livegames$lowSeed) ~ livegames$lowTeamWon)
boxplot(as.numeric(livegames$lowSeed) ~ livegames$lowTeamWon)
hist(livegames$lowSeed)
hist(as.numberic(livegames$lowSeed))
hist(as.numeric(livegames$lowSeed))
hist(as.numeric(livegames$lowSeed)/length(livegames$lowSeed))
hist(as.numeric(livegames$lowSeed)/length(livegames$lowSeed) ~ livegames$lowSeed)
hist(as.numeric(livegames$lowSeed)/length(livegames$lowSeed) ~ as.numeric(livegames$lowSeed))
hist(livegames$lowSeed)
hist(as.numeric(livegames$lowSeed))
hist(as.factor(livegames$lowSeed))
frequency(as.factor(livegames$lowSeed))
plot(as.numeric(livegames$lowSeed) ~ as.numeric(livegames$highSeed))
plot(as.numeric(livegames$lowSeed) ~ as.numeric(livegames$highSeed), color=livegames$lowTeamWon)
plot(as.numeric(livegames$lowSeed) ~ as.numeric(livegames$highSeed), col=livegames$lowTeamWon)
plot(as.numeric(livegames$lowSeed) ~ as.numeric(livegames$highSeed), col=as.factor(livegames$lowTeamWon)
plot(as.numeric(livegames$lowSeed) ~ as.numeric(livegames$highSeed), col=as.factor(livegames$lowTeamWon))
plot(as.numeric(livegames$lowSeed) ~ as.numeric(livegames$highSeed), col=as.factor(livegames$lowTeamWon))
plot(as.numeric(livegames$lowSeed) ~ as.numeric(livegames$highSeed), col=as.factor(livegames$lowTeamWon), size=.5)
head(regular_season_results)
head(predictions)
head(predictions, n=20)
livegames$seedDif <- livegames$lowSeed - livegames$highSeed
livegames$lowSeed <- as.numeric(livegames$lowSeed)
livegames$highSeed <- as.numeric(livegames$highSeed)
frequency(as.factor(livegames$lowSeed))
plot(livegames$lowSeed ~ livegames$highSeed, col=as.factor(livegames$lowTeamWon), size=.5)
livegames$seedDif <- livegames$lowSeed - livegames$highSeed
warnings()
head(predictions, n=20)
head(livegames, n=20)
plot(livegames$seedDif ~ (livegames$lowTeamWon/length(livegames)))
winsBySeed <- ddply(livegames,c("seedDif"), summarise, N=length(wteam))
head(winsBySeed)
winsBySeed
hist(winsBySeed$N ~ winsBySeed$seedDif)
hist(as.numeric(winsBySeed$N) ~ as.numeric(winsBySeed$seedDif)
hist(as.numeric(winsBySeed$N) ~ as.numeric(winsBySeed$seedDif))
hist(as.numeric(winsBySeed$N) ~ as.numeric(winsBySeed$seedDif))
winsBySeed$N <- as.numeric(winsBySeed$N)
winsBySeed$lowTeamWon <- as.numeric(winsBySeed$lowTeamWon)
hist(as.numeric(winsBySeed$N) ~ as.numeric(winsBySeed$seedDif))
hist(winsBySeed$N ~ winsBySeed$seedDif)
head(winsBySeed)
plot(winsBySeed$N ~ winsBySeed$seedDif)
jitter(winsBySeed$N ~ winsBySeed$seedDif)
jitter(winsBySeed$N, winsBySeed$seedDif)
hist(winsBySeed$N, winsBySeed$seedDif)
head(winsBySeed, breaks=1)
hist(winsBySeed$N, winsBySeed$seedDif, breaks=1)
hist(winsBySeed$N, winsBySeed$seedDif, breaks=30)
hist(winsBySeed$N, winsBySeed$seedDif, breaks=29)
winsBySeed
hist(winsBySeed$N, winsBySeed$seedDif, breaks=27)
plot(winsBySeed$N, winsBySeed$seedDif)
library(ggplot)
library(ggplot2)
ggplot2(winsBySeedN, winsBySeed$seedDif)
ggplot(winsBySeedN, winsBySeed$seedDif)
ggplot(winsBySeed$N, winsBySeed$seedDif)
ggplot(winsBySeed, aes(N, seedDif))
ggplot(winsBySeed, aes(N), x=seedDif)
qplot(N, data=winsBySeed, weight=N, geom="histogram")
qplot(seedDif, data=winsBySeed, weight=N, geom="histogram")
qplot(seedDif, data=winsBySeed, weight=N, geom="histogram") + geom_histogram(aes(y - ..density..)) + geom_density()
qplot(seedDif, data=winsBySeed, weight=N, geom="histogram") + geom_histogram(aes(y = ..density..)) + geom_density()
winsBySeed <- ddply(livegames,c("seedDif"), summarise, N=sum(livegames$lowTeamWon))
winsBySeed$N <- as.numeric(winsBySeed$N)
winsBySeed$lowTeamWon <- as.numeric(winsBySeed$lowTeamWon)
plot(winsBySeed$N, winsBySeed$seedDif)
qplot(seedDif, data=winsBySeed, weight=N, geom="histogram") + geom_histogram(aes(y = ..density..)) + geom_density()
livegames$lowTeamWon <- as.numeric(livegames$lowTeamWon)
winsBySeed <- ddply(livegames,c("seedDif"), summarise, N=sum(livegames$lowTeamWon))
winsBySeed$N <- as.numeric(winsBySeed$N)
winsBySeed$lowTeamWon <- as.numeric(winsBySeed$lowTeamWon)
plot(winsBySeed$N, winsBySeed$seedDif)
#ggplot(winsBySeed, aes(N), x=seedDif)
#ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
qplot(seedDif, data=winsBySeed, weight=N, geom="histogram") + geom_histogram(aes(y = ..density..)) + geom_density()
qplot(seedDif, data=winsBySeed, weight=N, geom="histogram") + geom_histogram(aes(y = ..density..)) + geom_density()
